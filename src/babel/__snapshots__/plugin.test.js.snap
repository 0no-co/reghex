// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`works together with @babel/plugin-transform-modules-commonjs 1`] = `
"\\"use strict\\";

var _reghex = require(\\"reghex\\");

var _node_expression = (0, _reghex._pattern)(1),
    _node_expression2 = (0, _reghex._pattern)(2);

const node = function _node() {
  var match,
      last_index = (0, _reghex._getLastIndex)(),
      node = (0, _reghex.tag)([], 'node');

  if (match = (0, _reghex._execPattern)(_node_expression)) {
    node.push(match);
  } else {
    (0, _reghex._setLastIndex)(last_index);
    return;
  }

  if (match = (0, _reghex._execPattern)(_node_expression2)) {
    node.push(match);
  } else {
    (0, _reghex._setLastIndex)(last_index);
    return;
  }

  return node;
};"
`;

exports[`works with local recursion 1`] = `
"import { tag, _getLastIndex, _setLastIndex, _execPattern, _pattern } from 'reghex';

var _inner_expression = _pattern(/inner/);

const inner = function _inner() {
  var match,
      last_index = _getLastIndex(),
      node = tag([], 'inner');

  if (match = _execPattern(_inner_expression)) {
    node.push(match);
  } else {
    _setLastIndex(last_index);

    return;
  }

  return node;
};

const node = function _node() {
  var match,
      last_index = _getLastIndex(),
      node = tag([], 'node');

  if (match = inner()) {
    node.push(match);
  } else {
    _setLastIndex(last_index);

    return;
  }

  return node;
};"
`;

exports[`works with non-capturing groups 1`] = `
"import { _getLastIndex, _setLastIndex, _execPattern, _pattern, tag as _tag } from 'reghex';

var _node_expression = _pattern(1),
    _node_expression2 = _pattern(2),
    _node_expression3 = _pattern(3);

const node = function _node() {
  var match,
      last_index = _getLastIndex(),
      node = _tag([], 'node');

  if (match = _execPattern(_node_expression)) {
    node.push(match);
  } else {
    _setLastIndex(last_index);

    return;
  }

  var length_0 = node.length;

  alternation_1: {
    block_1: {
      var index_1 = _getLastIndex();

      if (match = _execPattern(_node_expression2)) {
        node.push(match);
      } else {
        node.length = length_0;

        _setLastIndex(index_1);

        break block_1;
      }

      break alternation_1;
    }

    loop_1: for (var iter_1 = 0; true; iter_1++) {
      var index_1 = _getLastIndex();

      if (!_execPattern(_node_expression3)) {
        if (iter_1) {
          _setLastIndex(index_1);

          break loop_1;
        }

        node.length = length_0;

        _setLastIndex(last_index);

        return;
      }
    }
  }

  return node;
};"
`;

exports[`works with standard features 1`] = `
"import { _getLastIndex, _setLastIndex, _execPattern, _pattern, tag as _tag } from \\"reghex\\";

var _node_expression = _pattern(1),
    _node_expression2 = _pattern(2),
    _node_expression3 = _pattern(3),
    _node_expression4 = _pattern(4),
    _node_expression5 = _pattern(5);

const node = function _node() {
  var match,
      last_index = _getLastIndex(),
      node = _tag([], 'node');

  block_0: {
    var index_0 = _getLastIndex();

    loop_0: for (var iter_0 = 0; true; iter_0++) {
      var index_0 = _getLastIndex();

      if (match = _execPattern(_node_expression)) {
        node.push(match);
      } else {
        if (iter_0) {
          _setLastIndex(index_0);

          break loop_0;
        }

        _setLastIndex(index_0);

        break block_0;
      }
    }

    return node;
  }

  loop_0: for (var iter_0 = 0; true; iter_0++) {
    var index_0 = _getLastIndex();

    if (match = _execPattern(_node_expression2)) {
      node.push(match);
    } else {
      if (iter_0) {
        _setLastIndex(index_0);

        break loop_0;
      }

      _setLastIndex(last_index);

      return;
    }
  }

  loop_0: while (true) {
    var index_0 = _getLastIndex();

    var length_0 = node.length;

    if (match = _execPattern(_node_expression3)) {
      node.push(match);
    } else {
      node.length = length_0;

      _setLastIndex(index_0);

      break loop_0;
    }

    var index_2 = _getLastIndex();

    if (match = _execPattern(_node_expression4)) {
      node.push(match);
    } else {
      _setLastIndex(index_2);
    }

    if (match = _execPattern(_node_expression5)) {
      node.push(match);
    } else {
      node.length = length_0;

      _setLastIndex(index_0);

      break loop_0;
    }
  }

  return node;
};"
`;

exports[`works with transform functions 1`] = `
"import { _getLastIndex, _setLastIndex, _execPattern, _pattern, tag as _tag } from 'reghex';

var _inner_transform = x => x;

const first = function _inner() {
  var match,
      last_index = _getLastIndex(),
      node = _tag([], 'inner');

  return _inner_transform(node);
};

const transform = x => x;

const second = function _node() {
  var match,
      last_index = _getLastIndex(),
      node = _tag([], 'node');

  return transform(node);
};"
`;
